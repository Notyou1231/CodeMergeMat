name: Matillion Job Comparison

on:
  pull_request:
    branches:
      - development
    paths:
      - '**.json'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  compare-jobs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Get changed files
        id: changed-files
        run: |
          echo "files=$(git diff --name-only origin/development ${{ github.event.pull_request.head.sha }} | grep '\.json$' || true)" >> $GITHUB_OUTPUT

      - name: Compare Matillion jobs
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No JSON files changed"
            exit 0
          fi
          
          echo "# Matillion Job Comparison Report" > report.md
          echo "" >> report.md
          
          for FILE in $CHANGED_FILES; do
            echo "Analyzing $FILE..."
            if [ -f "$FILE" ]; then
              # Create temporary files for the comparison
              git show origin/development:"$FILE" > old_version.json 2>/dev/null || echo "{}" > old_version.json
              git show ${{ github.event.pull_request.head.sha }}:"$FILE" > new_version.json
              
              echo "### $FILE" >> report.md
              echo '```' >> report.md
              # Updated path to match your repository structure
              python .github/scripts/matillion_compare.py old_version.json new_version.json >> report.md
              echo '```' >> report.md
              echo "" >> report.md
            fi
          done

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: report
            });
