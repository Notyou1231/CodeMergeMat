name: Matillion Job Comparison

on:
  pull_request:
    branches:
      - main    # Changed from development to main
    paths:
      - '**.json'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  compare-jobs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Debug File Changes
        run: |
          echo "Current branch files:"
          ls -la
          echo "\nGit status:"
          git status
          echo "\nBranch information:"
          git branch -a
          echo "\nDiff with main:"
          git diff --name-status origin/main    # Changed from development to main

      - name: Get changed files
        id: changed-files
        run: |
          # List all changed JSON files between main and current PR
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.json$' || true)    # Changed from development to main
          echo "Changed files: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Create and populate report
        id: create-report
        run: |
          # Debug information
          echo "Current directory: $(pwd)"
          echo "List of files: $(ls -la)"
          
          # Ensure report directory exists
          mkdir -p ./reports
          
          # Initialize report
          echo "# Matillion Job Comparison Report" > ./reports/report.md
          echo "" >> ./reports/report.md
          
          # Get changed files
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          echo "Detected changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No JSON files changed" >> ./reports/report.md
          else
            for FILE in $CHANGED_FILES; do
              echo "Processing file: $FILE"
              
              if [ -f "$FILE" ]; then
                echo "Analyzing $FILE..."
                
                # Save both versions with debug output
                echo "Getting main version..."
                git show origin/main:"$FILE" > old_version.json 2>/dev/null || echo "{}" > old_version.json    # Changed from development to main
                echo "Getting PR version..."
                git show HEAD:"$FILE" > new_version.json
                
                echo "### $FILE" >> ./reports/report.md
                echo "\`\`\`" >> ./reports/report.md
                
                echo "Running comparison script..."
                python .github/scripts/matillion_compare.py old_version.json new_version.json >> ./reports/report.md || {
                  echo "Error running comparison script"
                  echo "Script error occurred" >> ./reports/report.md
                }
                
                echo "\`\`\`" >> ./reports/report.md
                echo "" >> ./reports/report.md
              else
                echo "File $FILE not found in workspace"
              fi
            done
          fi
          
          # Debug: Show final report
          echo "Final report content:"
          cat ./reports/report.md

      - name: Comment PR
        if: always()
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: ./reports/report.md
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback Comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fallbackMessage = `# Matillion Job Comparison Report
            
            Debug information:
            - PR number: ${context.issue.number}
            - Commit: ${context.sha}
            - Event: ${context.eventName}
            
            Please check the Actions tab for detailed logs.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: fallbackMessage
            });
